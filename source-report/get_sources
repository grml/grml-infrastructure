#!/usr/bin/perl
# Filename:      get_sources 
# Purpose:       Fetches sources and creates to report 
# Authors:       grml-team (grml.org), (c) Alexander Wirt
# Bug-Reports:   see http://grml.org/bugs/
# License:       This file is licensed under the GPL v2.
# Latest change: So Mai 06 02:18:45 CEST 2007 [formorer]
################################################################################

use strict; 
use warnings;
use English;

use LWP::Simple qw(!head);
use Data::Dumper; 
use HTML::Table;
use CGI qw/:standard/;
use YAML qw( LoadFile );
use Params::Validate qw(:all);
use File::Copy;
use Digest::MD5; 


#validates the configfile
sub validate_config ($) {
	validate_with(
			params => \@_,
			spec => {
				title => { type => SCALAR },
				statusfile => { type => SCALAR },
				sourcedir => { type => SCALAR },
				sourceslist => { type => SCALAR }, 
				chroot => { type => SCALAR },
				reportdir => { type => SCALAR },
				debug => { type => SCALAR, regex => qr/^(1|0)$/, optional => 1},
				alternativeurl => { type => HASHREF, optional => 1}, 
				updatesource => { type => SCALAR, regex => qr/^(1|0)$/, optional => 1},
				},
			on_fail => sub { print STDERR "Could not validate configfile: @_"; exit -1},

			)
}

sub md5_from_file($) {
	my $file = shift;
	die "'$file' does not exist" unless -f $file;
	open(my $fh, '<', $file)
		or die "Can't open '$file': $!";     
	binmode($fh); 
	my $md5sum = Digest::MD5->new->addfile(*$fh)->hexdigest;
	return $md5sum; 
}

my $configfile = shift; 
die "Usage: $0 <configfile>" unless $configfile && -f $configfile; 

my $config = LoadFile($configfile); 
validate_config($config); 
my $debug = $config->{debug} || 0; 

# if we can't write our reports and packages we can die soon ;) 
if (! -d $config->{reportdir}) {
	mkdir $config->{reportdir}
		or die "Could not create reportdir '".$config->{reportdir}."':$!"; 
}

if (! -d $config->{sourcedir}) {
	mkdir $config->{sourcedir}
		or die "Could not create sourcedir '".$config->{sourcedir}."':$!"; 
}

#fsrst build a package tree 
die "Status file '".$config->{statusfile}."' not found" unless -f $config->{statusfile}; 

open (my $fh, '<', $config->{statusfile}) or die "Could not open status file '".$config->{statusfile}."': $!";
my ($package_tree, $package, $version, $source); 
my $linenum = 0; 
while (my $line = <$fh>) {
	$linenum++; 
	chomp $line; 
	if ($line =~ /^Package: (.*)/) {
		$package = $1; 
	} elsif ($line =~ /^Version: (.*)/){
		$version = $1; 
	} elsif ($line =~ /Source: (.*)/){
		if ($1 =~ /^(\S+) \(([^)]+)\)$/) {
			$source = $1; 
			$version = $2; 
		} else {
			$source = $1; 
		}
	} elsif ($line =~ /^$/) { #finalizing
		$source = $source || $package; 
	
				#filter out binary nmus 
		if ($version =~ /^(.*)\+b/) {
			$version = $1;
		} elsif ($version =~ /(.*-.*)\.0\.\d+$/) { #old bin nmu 
			$version = $1; 
		} elsif ($version =~ /(.*-.*\.0)\.\d+$/) { #also old binnmu 
			$version = $1; 
		}
		if ($version && $source && $package) {
			$package_tree->{$package}->{'version'} = $version;
			$package_tree->{$package}->{'source'} = $source; 
		} else {
			print STDERR "Finalizing of ($linenum) not possible: package='$package', source='$source', version='$version'";
		}
		($source, $package, $version) = '';
	}
}

close ($fh); 

#if we provide our own sources list it will be copied into the chroot
if ($config->{sourceslist} && -f $config->{sourceslist}) {
	print "Copy sourceslist into chroot\n" if $debug; 
	system ("sudo cp " . $config->{sourceslist} . " " . $config->{chroot}."/etc/apt/sources.list") == 0
		or die "Could not copy sourceslist into chroot: $!"; 
}

#update chroot
system ("sudo chroot " . $config->{chroot} . " apt-get update") if $config->{updatesource}; 

foreach my $package (keys %{$package_tree}) {
	print "Working on $package\n" if $debug;
	my $error = 0; 
	my $version = $package_tree->{$package}->{'version'}; 
	my $source = $package_tree->{$package}->{'source'}; 
	if (exists $config->{alternativeurl}->{$source}) {
			print "Alternativ URL for $source => " . $config->{alternativeurl}->{$source} . "\n" if $debug;
			$package_tree->{$package}->{'status'} = 'OK/External';
			$package_tree->{$package}->{'url'} = $config->{alternativeurl}->{$source};
			next; 
	}
	$package_tree->{$package}->{'errors'} = (); 
	open (my $fh, '-|', "sudo chroot " . $config->{chroot} . " apt-get --print-uris -d source $source=$version 2>&1 ") 
		or warn "Could not launch chroot command:$!"; 
	while (my $line = <$fh>) {
		chomp $line;
		if ($line =~ /^'([^']+)'\s+(\S+)\s+(\S+)\s+(\S+)/) {
			my $uri = $1;
			my $filename = $2;
			my $size = $3; 
			my $md5sum = $4;
			print "Filename: $filename\n" if $debug;
			if (! -d $config->{reportdir}."/$source") {
				mkdir ($config->{reportdir}."/$source") 
					or die "Could not create package dir '".$config->{reportdir}."/$source':$!"; 
			}
			if (! -d $config->{sourcedir}."/$source") {
				mkdir ($config->{sourcedir}."/$source") 
					or die "Could not create package dir '".$config->{sourcedir}."/$source':$!"; 
			}
			my $status = 0; 
			if ( -e $config->{sourcedir}."/$source/$filename" ) {
				if ($md5sum eq md5_from_file($config->{sourcedir}."/$source/$filename")) {
					print $config->{sourcedir}."/$source/$filename already downloaded\n" if $debug;
					$status = 1; 
				} else { 
					print $config->{sourcedir}."/$source/$filename corrupt - download again\n" if $debug; 
				}
			
			}
			if ($status == 0)  {
				print "Getting uri '$uri' to ".$config->{sourcedir}. "/$source/$filename\n" if $debug;
				my $ret = getstore($uri, $config->{sourcedir}."/$source/$filename");
				if ($ret != 200) {
					print STDERR "Could not download $uri - Server returned: " . status_message($ret) . "\n"; 
					push @{$package_tree->{$package}->{'errors'}}, "$uri failed: " . status_message($ret); 
					$error =1; 
				} 

				if ($md5sum eq md5_from_file($config->{sourcedir}."/$source/$filename") ) {
					open (my $urifh, '>', $config->{sourcedir}."/$source/$filename.md5") 
						or die "Could not open " . $config->{sourcedir}."/$source/$filename.md5 for writing: $!";
					print $urifh $md5sum; 
					close $urifh;
					open ($urifh, '>', $config->{sourcedir}."/$source/$filename.uri")
						or die "Could not open " . $config->{sourcedir}."/$source/$filename.uri for writing: $!";
					print $urifh "$uri\n";
					close $urifh; 
				} else {
					print STDERR "md5sum mismatch of $uri\n";
					push @{$package_tree->{$package}->{'errors'}}, "$uri failed: md5sum mismatch";
					$error =1; 
				}
			}
			if (! $error) {
				print "Creating links\n" if $debug; 
				link $config->{sourcedir}."/$source/$filename",$config->{reportdir}."/$source/$filename";
			}
		} elsif ($line =~ /^E: (.*)/) {
			push @{$package_tree->{$package}->{'errors'}}, "$1";
			print STDERR "Got an error from apt-get for package $package (Source: $source, Version: $version): $1\n";
			$error = 1; 
		}
	}
	close ($fh);
	if ($error) {
		print "Package $package failed:\n" if $debug;
		print join("\n", @{$package_tree->{$package}->{'errors'}}) . "\n" if $debug;
		$package_tree->{$package}->{'status'} = 'FAILED';
	} else {
		print "Package $package successfull\n" if $debug;
		$package_tree->{$package}->{'status'} = 'OK'; 
	}
}

my $t = new HTML::Table( 
				-cols => 4, 
				-border=>1,
				-head=> ['Package','Source','Version', 'Status'],
			);
foreach my $package (sort(keys %{$package_tree})) {
	if ($package_tree->{$package}->{'status'} eq 'OK') {
	$t->addRow(	$package,
			"<a href='". $package_tree->{$package}->{'source'} . "'>" . $package_tree->{$package}->{'source'} . "</a>",
			$package_tree->{$package}->{'version'},
			$package_tree->{$package}->{'status'}
		);
	} elsif ($package_tree->{$package}->{'status'} eq 'FAILED') {
		open (my $fh, '>', $config->{reportdir}."/$package-error.html") 
			or die "Could not create error file '".$config->{reportdir}."/$package-error.html': $!"; 
		print $fh start_html("Errors for $package (" . $package_tree->{$package}->{'version'} . ")");
		print $fh "<h2>Errors for $package (". $package_tree->{$package}->{'version'} . ")</h2>";
		print $fh join("<br>\n", @{$package_tree->{$package}->{'errors'}}); 
		print $fh "<br><br><a href='index.html'>Back to index</a>";
		print $fh end_html; 
		close ($fh); 
		$t->addRow(	$package,
				$package_tree->{$package}->{'source'},
				$package_tree->{$package}->{'version'},
				"<a href='$package-error.html'>".$package_tree->{$package}->{'status'}."</a>"
			);
	} elsif ($package_tree->{$package}->{'status'} eq 'OK/External') {
		$t->addRow(     $package,
				"<a href='".$package_tree->{$package}->{'url'} . "'>" . $package_tree->{$package}->{'source'} . "</a>",
				$package_tree->{$package}->{'version'},
				$package_tree->{$package}->{'status'}
			);
	}
}


copy($config->{chroot}."/etc/apt/sources.list", $config->{reportdir}."/sources.list") or die "Sources list cannot be copied: $!";

#first some statistics 
my $pnum = keys(%{$package_tree}); 
my %s_hash; 
my $errors = 0;
foreach my $package (keys(%{$package_tree})) {
	$errors++ if $package_tree->{$package}->{'status'} =~ /^OK/; 
	if (! exists  $s_hash{ $package_tree->{$package}->{'source'} }) {
		$s_hash{$package_tree->{$package}->{'source'}} = 1; 
	}
}

my $snum = keys(%s_hash); 
open ($fh, '>', $config->{reportdir}."/index.html") or die "Could not create indexfile '".$config->{reportdir}."/index.html': $!";
print $fh start_html("Report for " . $config->{title}); 
print $fh "<center><h2>Report for " . $config->{title} . "</h2>";
print $fh "<b>Packages:</b> $pnum<br>"; 
print $fh "<b>Sources:</b> $snum<br>";
print $fh "<b>Errors:</b> $errors (" . $errors/$snum*100 . "%)<br>"; 
print $fh "<a href='sources.list'>Sources list of the chroot</a><br><br>"; 
print $fh $t;
print $fh end_html;
close ($fh); 




